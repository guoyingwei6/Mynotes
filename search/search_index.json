{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Bioinfomatics/Knowledge/","title":"\u751f\u4fe1\u77e5\u8bc6\u50a8\u5907","text":""},{"location":"Bioinfomatics/Technology/","title":"\u751f\u4fe1\u6280\u672f\u50a8\u5907","text":""},{"location":"Programing/Python/extract-from-fastq/","title":"\u4ecefastq\u6587\u4ef6\u4e2d\u6279\u91cf\u63d0\u53d6/\u8fc7\u6ee4\u5e8f\u5217","text":"<p>\u535a\u4e3b\u4e5f\u662f\u521a\u521a\u63a5\u89e6\u751f\u4fe1\uff0c\u4f1a\u5c06\u81ea\u5df1\u5e73\u65f6\u7ec3\u4e60\u7528\u5230\u7684python\u811a\u672c\u53d1\u5e03\u5230\u535a\u5ba2\u4e0a\uff0c\u7528\u6765\u8bb0\u5f55\u81ea\u5df1\u7684\u5b66\u4e60\u4e4b\u8def\u3002</p>","tags":["documentation","sample"]},{"location":"Programing/Python/extract-from-fastq/#_1","title":"\u4ecb\u7ecd","text":"<p>\u6d4b\u5e8f\u56de\u6765\u7684fastq\u6587\u4ef6\u901a\u5e38\u5728\u5206\u6790\u4e4b\u524d\uff0c\u9700\u8981\u8fdb\u884c\u8fc7\u6ee4\uff0c\u8be5\u811a\u672c\u5229\u7528python\u5b9e\u73b0fastq\u6587\u4ef6\u4e2d\u63d0\u53d6\u6307\u5b9aID\u7684\u5e8f\u5217\uff0c\u5e76\u4fdd\u5b58\u4e3a\u65b0fastq\u6587\u4ef6\uff0c\u811a\u672c\u4e00\u6240\u6709\u8f93\u5165\u6587\u4ef6\u548c\u8f93\u51fa\u6587\u4ef6\u90fd\u5fc5\u987b\u662f\u538b\u7f29\u6587\u4ef6\u683c\u5f0f\uff0c\u811a\u672c\u4e8c\u662f\u5426\u538b\u7f29\u5747\u53ef\uff0c\u4f46\u8f93\u51fa\u7684\u8fc7\u6ee4\u540e\u7684\u6587\u4ef6\u4f1a\u548c\u539f\u59cbfastq\u6587\u4ef6\u4fdd\u6301\u4e00\u81f4\u3002</p>","tags":["documentation","sample"]},{"location":"Programing/Python/extract-from-fastq/#_2","title":"\u8bf4\u660e","text":"<p>\u811a\u672c\u4e00\uff1a - \u8f93\u5165\u6587\u4ef6\u4e3afq.gz\u6587\u4ef6\uff0c\u538b\u7f29\u7684ID list\u6587\u4ef6\u3002 - \u5fc5\u987b\u662f\u538b\u7f29\u683c\u5f0f\u7684\u6587\u4ef6\u624d\u53ef\u4ee5\uff0c\u5982\u679c\u975e\u538b\u7f29\u683c\u5f0f\uff0c\u53ef\u4ee5\u538b\u7f29\u6210gz\u683c\u5f0f\u540e\u4f7f\u7528\u8be5\u811a\u672c\uff0c\u6216\u8005\u5c06\u8be5\u811a\u672c\u6539\u5199\u3002</p> <p>\u811a\u672c\u4e8c\uff1a - \u81ea\u52a8\u8bc6\u522binput\u6587\u4ef6\u683c\u5f0f\uff0c\u65e0\u8bbafq\u6587\u4ef6\u662f\u5426\u538b\u7f29\u90fd\u53ef\u4ee5\u6253\u5f00\u3002 - \u8f93\u51fa\u6587\u4ef6\u683c\u5f0f\u9ed8\u8ba4\u4e0efq\u6587\u4ef6\u4e00\u81f4\uff0c\u5373fq\u662f\u538b\u7f29\u6587\u4ef6\uff0c\u8fc7\u6ee4\u540e\u7684\u8f93\u51fa\u6587\u4ef6\u4e5f\u662f\u538b\u7f29\u6587\u4ef6\uff0cfq\u6ca1\u6709\u538b\u7f29\uff0c\u8f93\u51fa\u6587\u4ef6\u4e5f\u662f\u666e\u901a\u683c\u5f0f\u3002</p>","tags":["documentation","sample"]},{"location":"Programing/Python/extract-from-fastq/#_3","title":"\u811a\u672c\u5982\u4e0b","text":"<p>\u811a\u672c\u4e00</p> <p><pre><code>#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n#Author: gyw\n#Date: 2019-03-07\n#E-mail: willgyw@126.com\n#Description:Filter reads from fastq.gz \n\nimport gzip\nimport argparse\n\n\nparser = argparse.ArgumentParser(description='filter reads from fastq.gz')\nparser.add_argument('--fastq', '-q', dest='fastq', help='input a fastq.gz file')\nparser.add_argument('--idlist', '-i', dest='idlist', help='input idlist.gz file')\nparser.add_argument('--outfile', '-o', dest='outfile', help='input outfile name,end by gz')\nargs = parser.parse_args()\n\nfastqdict = {}\n\nwith gzip.open(args.fastq, 'rb') as fastq:\n    for line in fastq:\n        if line.decode().startswith('@'):\n            fastqid = line.decode().strip().split()[0][1:]\n            fastqdict[fastqid] = ''\n        else:\n            fastqdict[fastqid] += line.decode()\n\noutfile = gzip.open(args.outfile, 'wb')\n\nwith gzip.open(args.idlist, 'rb') as idfile:\n    for line in idfile:\n        readsid = line.decode().strip()\n        for key in fastqdict.keys():\n            if readsid == key:\n                res = '@' + key + '\\n' + fastqdict[key]\n                outfile.write(res.encode())\n\noutfile.close()\n</code></pre> \u811a\u672c\u4e8c <pre><code>import filetype\nimport gzip\nimport argparse\n\n\nparser = argparse.ArgumentParser(description='filter reads from fastq')\nparser.add_argument('--fastq', '-q', dest='fastq', help='input a fastq file')\nparser.add_argument('--idlist', '-i', dest='idlist', help='input idlist file')\nparser.add_argument('--outfile', '-o', dest='outfile', help='input outfile name')\nargs = parser.parse_args()\n\nfastqdict = {}\nkind1 = filetype.guess(args.fastq)\nkind2 = filetype.guess(args.idlist)\nif kind1 is None:\n    with open(args.fastq,'r') as fastq:\n        for line in fastq:\n            if line.startswith('@'):\n                fastqid = line.strip().split()[0][1:]\n                fastqdict[fastqid] = ''\n            else:\n                fastqdict[fastqid] += line\nelif kind1.extension == 'gz':\n    with gzip.open(args.fastq, 'rb') as fastq:\n        for line in fastq:\n            if line.decode().startswith('@'):\n                fastqid = line.decode().strip().split()[0][1:]\n                fastqdict[fastqid] = ''\n            else:\n                fastqdict[fastqid] += line.decode()\nif kind1 is None:\n    outfile = open(args.outfile, 'w')\nelif kind1.extension == 'gz':\n    outfile = gzip.open(args.outfile, 'wb')\nif kind2 is None:\n    with open(args.idlist, 'r') as idfile:\n        for line in idfile:\n            readsid = line.strip()\n            for key in fastqdict.keys():\n                if readsid == key:\n                    res = '@' + key + '\\n' + fastqdict[key]\n                    if kind1 is None:\n                        outfile.write(res)\n                    elif kind1.extension == 'gz':\n                        outfile.write(res.encode())\nelif kind2.extension == 'gz':\n    with gzip.open(args.idlist, 'rb') as idfile:\n        for line in idfile:\n            readsid = line.decode().strip()\n            for key in fastqdict.keys():\n                if readsid == key:\n                    res = '@' + key + '\\n' + fastqdict[key]\n                    if kind1 is None:\n                        outfile.write(res)\n                    elif kind1.extension == 'gz':\n                        outfile.write(res.encode())\n\noutfile.close()\n</code></pre></p> <p>\u5982\u6709\u9519\u8bef\uff0c\u6b22\u8fce\u5927\u5bb6\u6307\u6b63\u3002</p>","tags":["documentation","sample"]}]}